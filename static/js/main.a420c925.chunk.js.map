{"version":3,"sources":["components/Header.jsx","components/BoardCol.jsx","components/BoardRow.jsx","components/RenderBlockCol.jsx","components/RenderBlockRow.jsx","components/RenderBlocks.jsx","components/TrayBlock.jsx","components/switchBlocks.js","components/simSwitchBlocks.js","components/overlaySwitchBlocks.js","components/Board.jsx","components/Footer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","BoardCol","value","rowIndex","colIndex","deliverClickIndex","deliverMouserOverIndex","deliverClickFunc","deliverOverFunc","e","type","onClick","onMouseOver","onMouseLeave","BoardRow","boardColMap","map","col","index","RenderBlockCol","RenderBlockRow","RenderBlockRowMap","renderBlocks","blockCode","blockRowMap","Object","values","row","TrayBlock","codeDeliver","indexDeliver","trayIndex","RenderBlocks","switchBlocks","tempBoard","sRow","sCol","i","j","simSwitchBlocks","overlaySwitchBlocks","create2DArray","arr","Array","fill","Board","useState","board","setBoard","score","setScore","setBlockCode","blockIndexInTrayArr","setBlockIndexInTrayArr","tempArr","min","Math","ceil","max","floor","push","random","createRandomTray","trayBlockArr","setTrayBlockArr","backUpBoard","setBackupBoard","useEffect","simulateTray","setBlock","status","overlayBlock","boardRowMap","trayBlockMap","settedBoard","console","log","checkerAfterBlockSet","overMouse","leaveMouse","settedOverlayBoard","item","checkToClear","splice","sumOfTray","changeRandomTray","defGeo","copyOfBoard","toClear","sqr","sumOfRow","sumOfCol","sumOfSquare","k","clearBoard","scoreByAction","rmRow","rmCol","rmSqr","setCount","emptyTrayCount","length","simulateBlockSet","error","simBoard","simSettedBoard","Footer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a420c925.chunk.js","sourcesContent":["function Header() {\n  return (\n    <div className=\"header\">\n    </div>\n  );\n}\n\nexport default Header;\n","function BoardCol({value, rowIndex, colIndex, deliverClickIndex, deliverMouserOverIndex}) {\n\n  const deliverClickFunc = () => {\n    deliverClickIndex(rowIndex, colIndex)\n  }\n\n  const deliverOverFunc = (e) => {\n    deliverMouserOverIndex(rowIndex, colIndex, e.type)\n  }\n\n    // For 3*3 Checkerboard pattern (CSS class)\n    if ( rowIndex === 3 || rowIndex === 4 || rowIndex === 5  ) {\n      if ( colIndex === 3 || colIndex === 4 || colIndex === 5  ) {\n        return (\n          <div \n            className={value === 0 ? \"board-col\" : value === 1 ? \"board-col placed\" : \"board-col overlay\"}\n            onClick={deliverClickFunc}\n            onMouseOver={deliverOverFunc}\n            onMouseLeave={deliverOverFunc}\n          >\n          </div>\n        );\n      }\n      else {\n        return (\n          <div \n            className={value === 0 ? \"board-col-bright\" : value === 1 ? \"board-col placed\" : \"board-col overlay\"}\n            onClick={deliverClickFunc}\n            onMouseOver={deliverOverFunc}\n            onMouseLeave={deliverOverFunc}\n          >\n          </div>\n        );\n      }\n    }\n    else {\n      if ( colIndex === 0 || colIndex === 1 || colIndex === 2 || colIndex === 6 || colIndex === 7 || colIndex === 8  ) {\n        return (\n          <div \n            className={value === 0 ? \"board-col\" : value === 1 ? \"board-col placed\" : \"board-col overlay\"}\n            onClick={deliverClickFunc}\n            onMouseOver={deliverOverFunc}\n            onMouseLeave={deliverOverFunc}\n          >\n          </div>\n        );\n      }\n      else {\n        return (\n          <div \n            className={value === 0 ? \"board-col-bright\" : value === 1 ? \"board-col placed\" : \"board-col overlay\"}\n            onClick={deliverClickFunc}\n            onMouseOver={deliverOverFunc}\n            onMouseLeave={deliverOverFunc}\n          >\n          </div>\n        );\n      }\n    }\n\n  }\n  \n  export default BoardCol;\n  ","import BoardCol from \"./BoardCol\";\n\nfunction BoardRow({value, rowIndex, deliverClickIndex, deliverMouserOverIndex}) {\n\n  const boardColMap = value.map((col, index) => (<BoardCol value={col} rowIndex={rowIndex} colIndex={index} deliverClickIndex={deliverClickIndex} deliverMouserOverIndex={deliverMouserOverIndex} key={index}></BoardCol>))\n\n  return (\n    <div \n      className=\"board-row\"\n    >\n      {boardColMap}\n    </div>\n  );\n}\n  \nexport default BoardRow;","function RenderBlockCol({value}) {\n    return (\n      <div \n        className={value === 0 ? \"tray-block\" : \"tray-block placed\"}\n      >\n      </div>\n    );\n  }\n  \n  export default RenderBlockCol;\n  ","import RenderBlockCol from \"./RenderBlockCol\";\n\nfunction RenderBlockRow({value}) {\n  const RenderBlockRowMap = value.map((col, index) => (<RenderBlockCol value={col} key={index}></RenderBlockCol>))\n\n  return (\n    <div \n      className=\"tray-block-row\"\n    >\n      {RenderBlockRowMap}\n    </div>\n  );\n}\n  \nexport default RenderBlockRow;\n  ","import RenderBlockRow from \"./RenderBlockRow\";\n\nfunction renderBlocks({blockCode}) {\n\n    const defBlocks = {\n        0: {\n\n        },\n        1: {\n            1: [1, 1, 1, 1, 1]\n        },\n        2: {\n            1: [1, 1, 1]\n        },\n        3: {\n            1: [1],\n            2: [1],\n            3: [1],\n            4: [1],\n            5: [1]\n        },\n        4: {\n            1: [1],\n            2: [1],\n            3: [1]\n        },\n        5: {\n            1: [1, 1],\n            2: [1, 1],\n        }\n    }\n    \n    const blockRowMap = Object.values(defBlocks[blockCode]).map((row, index) => (<RenderBlockRow value={row} key={index}></RenderBlockRow>))\n    \n    return (\n        <div className=\"block-wrap\">\n            {blockRowMap}\n        </div>\n    );\n}\n\nexport default renderBlocks;","import RenderBlocks from \"./RenderBlocks\"\n\nfunction TrayBlock({blockCode, codeDeliver, indexDeliver, trayIndex}) {\n    const setBlockInfo = () => {\n        codeDeliver(blockCode)\n        indexDeliver(trayIndex)\n    }\n\n  return (\n    <div \n        className=\"tray-block-area\"\n        onClick={setBlockInfo}\n    >\n        <RenderBlocks blockCode={blockCode}></RenderBlocks>\n    </div>\n  );\n}\n  \nexport default TrayBlock;\n  ","function switchBlocks(tempBoard, blockCode, sRow, sCol) {\n    switch (blockCode) {\n        // Horizotal 5 Length bar\n        case 1:\n            if (sCol > 4) {\n                return 0\n              }\n            // Length Check\n            for (let i = 0; i < 5; i++) {\n                if (tempBoard[sRow][sCol + i] === 1) {\n                    return 0\n                }\n            }\n            // Set Bolock If Pass Every Tests\n            for (let i = 0; i < 5; i++) {\n                tempBoard[sRow][sCol + i] = 1\n            }\n            return tempBoard\n        // Horizotal 3 Length bar\n        case 2:\n            if (sCol > 6) {\n                return 0\n              }\n            for (let i = 0; i < 3; i++) {\n                if (tempBoard[sRow][sCol + i] === 1) {\n                    return 0\n                }\n            }\n            // Set Bolock If Pass Every Tests\n            for (let i = 0; i < 3; i++) {\n                tempBoard[sRow][sCol + i] = 1\n            }\n            return tempBoard\n        // Vertical 5 Length Bar\n        case 3:\n            if (sRow > 4) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 5; i++) {\n                if (tempBoard[sRow + i][sCol] === 1) {\n                    return 0\n                }\n            }\n            // Set Bolock If Pass Every Tests\n            for (let i = 0; i < 5; i++) {\n                tempBoard[sRow + i][sCol] = 1\n            }\n            return tempBoard\n        // Vertical 3 Length Bar\n        case 4:\n            if (sRow > 6) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 3; i++) {\n                if (tempBoard[sRow + i][sCol] === 1) {\n                    return 0\n                }\n            }\n            // Set Bolock If Pass Every Tests\n            for (let i = 0; i < 3; i++) {\n                tempBoard[sRow + i][sCol] = 1\n            }\n            return tempBoard\n        // 2X2 Square\n        case 5:\n            if (sRow > 7) {\n                return 0\n            }\n            if (sCol > 7) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 2; i++) {\n                for (let j = 0; j <= 1; j++) {\n                    if (tempBoard[sRow + i][sCol + j] === 1) {\n                        return 0\n                    }\n                }\n            }\n            for (let i = 0; i < 2; i++) {\n                for (let j = 0; j <= 1; j++) {\n                    tempBoard[sRow + i][sCol + j] = 1\n                }\n            }\n            return tempBoard\n        default:\n            break;\n    }\n}\n\nexport default switchBlocks;","function simSwitchBlocks(tempBoard, blockCode, sRow, sCol) {\n    switch (blockCode) {\n        // Horizotal 5 Length bar\n        case 1:\n            if (sCol > 4) {\n                return 0\n              }\n            // Length Check\n            for (let i = 0; i < 5; i++) {\n                if (tempBoard[sRow][sCol + i] === 1) {\n                    return 0\n                }\n            }\n            return 1\n        // Horizotal 3 Length bar\n        case 2:\n            if (sCol > 6) {\n                return 0\n              }\n            for (let i = 0; i < 3; i++) {\n                if (tempBoard[sRow][sCol + i] === 1) {\n                    return 0\n                }\n            }\n            return 1\n        // Vertical 5 Length Bar\n        case 3:\n            if (sRow > 4) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 5; i++) {\n                if (tempBoard[sRow + i][sCol] === 1) {\n                    return 0\n                }\n            }\n            return 1\n        // Vertical 3 Length Bar\n        case 4:\n            if (sRow > 6) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 3; i++) {\n                if (tempBoard[sRow + i][sCol] === 1) {\n                    return 0\n                }\n            }\n            return 1\n        // 2X2 Square\n        case 5:\n            if (sRow > 7) {\n                return 0\n            }\n            if (sCol > 7) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 2; i++) {\n                for (let j = 0; j <= 1; j++) {\n                    if (tempBoard[sRow + i][sCol + j] === 1) {\n                        return 0\n                    }\n                }\n            }\n            return 1\n        default:\n            break;\n    }\n}\n\nexport default simSwitchBlocks;","function overlaySwitchBlocks(tempBoard, blockCode, sRow, sCol) {\n    switch (blockCode) {\n        // Horizotal 5 Length bar\n        case 1:\n            if (sCol > 4) {\n                return 0\n              }\n            // Length Check\n            for (let i = 0; i < 5; i++) {\n                if (tempBoard[sRow][sCol + i] === 1) {\n                    return 0\n                }\n            }\n            // Set Bolock If Pass Every Tests\n            for (let i = 0; i < 5; i++) {\n                tempBoard[sRow][sCol + i] = 2\n            }\n            return tempBoard\n        // Horizotal 3 Length bar\n        case 2:\n            if (sCol > 6) {\n                return 0\n              }\n            for (let i = 0; i < 3; i++) {\n                if (tempBoard[sRow][sCol + i] === 1) {\n                    return 0\n                }\n            }\n            // Set Bolock If Pass Every Tests\n            for (let i = 0; i < 3; i++) {\n                tempBoard[sRow][sCol + i] = 2\n            }\n            return tempBoard\n        // Vertical 5 Length Bar\n        case 3:\n            if (sRow > 4) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 5; i++) {\n                if (tempBoard[sRow + i][sCol] === 1) {\n                    return 0\n                }\n            }\n            // Set Bolock If Pass Every Tests\n            for (let i = 0; i < 5; i++) {\n                tempBoard[sRow + i][sCol] = 2\n            }\n            return tempBoard\n        // Vertical 3 Length Bar\n        case 4:\n            if (sRow > 6) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 3; i++) {\n                if (tempBoard[sRow + i][sCol] === 1) {\n                    return 0\n                }\n            }\n            // Set Bolock If Pass Every Tests\n            for (let i = 0; i < 3; i++) {\n                tempBoard[sRow + i][sCol] = 2\n            }\n            return tempBoard\n        // 2X2 Square\n        case 5:\n            if (sRow > 7) {\n                return 0\n            }\n            if (sCol > 7) {\n                return 0\n            }\n            // Length Check\n            for (let i = 0; i < 2; i++) {\n                for (let j = 0; j <= 1; j++) {\n                    if (tempBoard[sRow + i][sCol + j] === 1) {\n                        return 0\n                    }\n                }\n            }\n            for (let i = 0; i < 2; i++) {\n                for (let j = 0; j <= 1; j++) {\n                    tempBoard[sRow + i][sCol + j] = 2\n                }\n            }\n            return tempBoard\n        default:\n            break;\n    }\n}\n\nexport default overlaySwitchBlocks;","import { useState, useEffect } from 'react';\nimport BoardRow from './BoardRow';\nimport TrayBlock from './TrayBlock';\nimport switchBlocks from './switchBlocks.js';\nimport simSwitchBlocks from './simSwitchBlocks.js';\nimport overlaySwitchBlocks from './overlaySwitchBlocks.js';\n\n\n// Function for declare board\nfunction create2DArray(row, col) {\n  let arr = new Array(row);\n  for (let i = 0; i < row; i ++) {\n    arr[i] = new Array(col);\n    arr[i].fill(0);\n  }\n  return arr;\n}\n\n// Function for genarate random tray\nfunction createRandomTray() {\n  let tempArr = []\n  const min = Math.ceil(1)\n  const max = Math.floor(5)\n  for (let i = 1; i <= 3; i++) {\n    tempArr.push(Math.floor(Math.random() * (max - min + 1)) + min)\n  }\n  return tempArr\n}\n\nfunction Board() {\n  const [board, setBoard] = useState(create2DArray(9, 9))\n  const [score, setScore] = useState(0)\n  const [blockCode, setBlockCode] =  useState(0)\n  const [blockIndexInTrayArr, setBlockIndexInTrayArr] = useState(0)\n  const [trayBlockArr, setTrayBlockArr] = useState(createRandomTray())\n  const [backUpBoard, setBackupBoard] = useState(create2DArray(9, 9))\n\n  useEffect(() => {\n    // Simulate tray after change that\n    simulateTray()\n  }, [trayBlockArr]);\n\n  const deliverClickIndex = (row, col) => {\n    setBlock(row, col)\n  }\n\n  const deliverMouserOverIndex = (row, col, status) => {\n    overlayBlock(row, col, status)\n  }\n\n  const boardRowMap = board.map((row, index) => (<BoardRow value={row} rowIndex={index} deliverClickIndex={deliverClickIndex} deliverMouserOverIndex={deliverMouserOverIndex} key={index}></BoardRow>))\n  const trayBlockMap = trayBlockArr.map((blockCode, index) => (<TrayBlock blockCode={blockCode} codeDeliver={setBlockCode} indexDeliver={setBlockIndexInTrayArr} trayIndex={index} key={index}></TrayBlock>))\n\n  const setBlock = (sRow, sCol) => {\n    let tempBoard = board\n    let settedBoard = switchBlocks(tempBoard, blockCode, sRow, sCol)\n    if (settedBoard === 0 ) {\n      console.log(\"nothing to do\")\n    }\n    else if (typeof settedBoard == \"object\"){\n      setBoard([...settedBoard])\n      setBlockCode(0)\n      checkerAfterBlockSet()\n      setBackupBoard([...board])\n    }\n  }\n\n  const overlayBlock = (sRow, sCol, status) => {\n    switch (status) {\n      case 'mouseover':\n        overMouse(sRow, sCol)\n        return\n      case 'mouseleave':\n        leaveMouse()\n        return\n      default:  \n        break;\n    }\n  }\n  \n  const overMouse = (sRow, sCol) => {\n    let settedOverlayBoard = overlaySwitchBlocks(board, blockCode, sRow, sCol)\n    if (typeof settedOverlayBoard === \"object\") {\n      setBoard([...settedOverlayBoard])\n    }\n  }\n\n  const leaveMouse = () => {\n    setBoard([...backUpBoard.map((item) => [...item])])\n  }\n\n  // Action After Block Set\n  const checkerAfterBlockSet = () => {\n    let copyOfBoard = board\n    checkToClear(copyOfBoard)\n    trayBlockArr.splice(blockIndexInTrayArr, 1, 0)\n    // check blockTray empty\n    let sumOfTray = 0\n    for (let i = 0; i < 3; i++) {\n      sumOfTray += trayBlockArr[i]\n    }\n    if ( sumOfTray === 0 ) {\n      changeRandomTray()\n    }\n    // Simulate game\n    simulateTray()\n  }\n\n  // Board Zone Geo Code (3*3 zone)\n  const defGeo = {\n    1: {1:0, 2:0, 3:2, 4:2}, 2: {1:0, 2:3, 3:2, 4:5}, 3: {1:0, 2:6, 3:2, 4:8},\n    4: {1:3, 2:0, 3:5, 4:2}, 5: {1:3, 2:3, 3:5, 4:5}, 6: {1:3, 2:6, 3:5, 4:8},\n    7: {1:6, 2:0, 3:8, 4:2}, 8: {1:6, 2:3, 3:8, 4:5}, 9: {1:6, 2:6, 3:8, 4:8}\n  }\n  // Check Cell to Clear\n  const checkToClear = (copyOfBoard) => {\n    let toClear = {\n      row: [],\n      col: [],\n      sqr: []\n    }\n    for (let i = 0; i < 9; i++) {\n      let sumOfRow = 0;\n      for (let j = 0; j < 9; j++) {\n        sumOfRow += copyOfBoard[i][j] \n      }\n      if (sumOfRow === 9) {\n        toClear.row.push(i)\n      }\n    }\n    for (let i = 0; i < 9; i++) {\n      let sumOfCol = 0;\n      for (let j = 0; j < 9; j++) {\n        sumOfCol += copyOfBoard[j][i] \n      }\n      if (sumOfCol === 9) {\n        toClear.col.push(i)\n      }\n    }\n    for (let i = 1; i < 10; i++) {\n      let sumOfSquare = 0;\n      for (let j = defGeo[i][1]; j <= defGeo[i][3]; j++) {\n        for (let k = defGeo[i][2]; k <= defGeo[i][4]; k++) {\n          sumOfSquare += copyOfBoard[j][k] \n        }\n        if (sumOfSquare === 9) {\n          toClear.sqr.push(i)\n        }\n      }\n    }\n    clearBoard(toClear)\n  }\n\n  const clearBoard = (toClear) => {\n    let copyOfBoard = board\n    let scoreByAction = 0\n    for (let rmRow of toClear.row){\n      for (let i = 0; i < 9; i++) {\n        copyOfBoard[rmRow][i] = 0\n        scoreByAction ++\n      }\n    }\n    for (let rmCol of toClear.col){ \n      for (let i = 0; i < 9; i++) {\n        copyOfBoard[i][rmCol] = 0\n        scoreByAction ++\n      }\n    }\n    for (let rmSqr of toClear.sqr){\n      for (let j = defGeo[rmSqr][1]; j <= defGeo[rmSqr][3]; j++) {\n        for (let k = defGeo[rmSqr][2]; k <= defGeo[rmSqr][4]; k++) {\n          copyOfBoard[j][k] = 0\n          scoreByAction ++\n        }\n      }\n    }\n    setScore(score + scoreByAction)\n    setBoard([...copyOfBoard])\n  }\n\n  // Function for random tray\n  function changeRandomTray() {\n    let tempArr = []\n    const min = Math.ceil(1)\n    const max = Math.floor(5)\n    for (let i = 1; i <= 3; i++) {  \n      tempArr.push(Math.floor(Math.random() * (max - min + 1)) + min)\n    }\n    setTrayBlockArr(tempArr)\n  }\n\n  const simulateTray = () => {\n    let setCount = 0\n    let emptyTrayCount = 0\n    // for each tray block\n    for (let i = 0; i < trayBlockArr.length; i++) {\n      if ( trayBlockArr[i] !== 0 ) {\n        // for each row \n        for (let j = 0; j < 9; j++) {\n          // for each col\n          for (let k = 0; k < 9; k++) {\n            if ( board[j][k] === 0 ) {\n              setCount += simulateBlockSet(board, trayBlockArr[i], j, k)\n            } \n          }\n        }\n      }\n      else if ( trayBlockArr[i] === 0 ) {\n        emptyTrayCount ++\n      }\n    }\n    if ( setCount === 0 && emptyTrayCount === 3) {\n    }\n    else if (setCount === 0 ){\n      console.error('gameover')\n    }\n    else if (setCount !== 0 ){\n    }\n  }\n\n  const simulateBlockSet = (simBoard, blockCode, sRow, sCol) => {\n    let simSettedBoard = 0\n    if ( blockCode !== 0 ) {\n      simSettedBoard = simSwitchBlocks(simBoard, blockCode, sRow, sCol)\n    } \n    if ( simSettedBoard === 0 ) {\n      return 0\n    }\n    else if ( simSettedBoard === 1 ){\n      return 1\n    }\n  }\n\n  return (\n    <div>\n      <div className=\"score\">\n        <div className=\"score-text\">\n        {score}\n        </div>\n      </div>\n      <div className=\"board\">\n        {boardRowMap}\n      </div>\n      <div className=\"tray\">\n        {trayBlockMap}\n      </div>\n    </div>\n  );\n}\n\nexport default Board;\n","function Footer() {\n  return (\n    <div className=\"footer\">\n    </div>\n  );\n}\n\nexport default Footer;\n","import Header from './components/Header';\nimport Board from './components/Board';\nimport Footer from './components/Footer';\n\nimport './css/App.css';\nimport './css/Board.css';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <div className=\"container\">\n        <Header />\n        <Board />\n        <Footer />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}